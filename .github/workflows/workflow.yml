name: Super Workflow

on:
  push:
    branches:
      - main
      - check
    paths:
      - 'app/**'
      - 'api/**'
      - 'infrastructure/**'
      - 'receipt-scanner/**'

jobs:
  eslint:
    runs-on: ubuntu-22.04
    name: ESLint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      
      - name: Run ESLint check for frontend
        run: |
          pnpm install --frozen-lockfile
          pnpm lint
        working-directory: ./app

      - name: Run ESLint check for backend
        run: |
          pnpm install --frozen-lockfile
          pnpm lint
        working-directory: ./api

      - name: Run ESLint check for receipt-scanner
        run: |
          pnpm install --frozen-lockfile
          pnpm lint
        working-directory: ./receipt-scanner

  build-backend:
    runs-on: ubuntu-latest
    name: Build and deploy Backend
    needs: [eslint]
    if: ${{ github.event_name == 'push' && github.event.head_commit.modified_files.includes('api') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev
          
      - name: Declare commit hash variable
        shell: bash
        run: |
          echo "git_hash=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "IMAGE=europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/paragoniks-api/paragoniks-api" >> "$GITHUB_ENV"

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg GIT_HASH=${{ env.git_hash }} \
            -t ${{ env.IMAGE }}:${{ env.git_hash }} \
            -t ${{ env.IMAGE }}:latest \
            -f ./api/docker/Dockerfile ./api
          
          docker push ${{ env.IMAGE }} --all-tags

  build-receipt-scanner:
    runs-on: ubuntu-latest
    name: Build and push Receipt Scanner
    needs: [eslint]
    if: ${{ github.event_name == 'push' && github.event.head_commit.modified_files.includes('receipt-scanner') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Declare commit hash variable
        shell: bash
        run: |
          echo "git_hash=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
          echo "IMAGE=europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/paragoniks-receipt-scanner/receipt-scanner" >> "$GITHUB_ENV"

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev

          # Build and push Docker image
          docker build \
            --build-arg GIT_HASH=${{ env.git_hash }} \
            -t ${{ env.IMAGE }}:${{ env.git_hash }} \
            -t ${{ env.IMAGE }}:latest \
            -f ./receipt-scanner/docker/Dockerfile ./receipt-scanner
          
          docker push ${{ env.IMAGE }} --all-tags

  build-frontend:
    runs-on: ubuntu-latest
    name: Build and deploy Frontend
    needs: [eslint]
    if: ${{ github.event_name == 'push' && github.event.head_commit.modified_files.includes('app') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
        working-directory: ./app

      - name: Build web version
        env:
          EXPO_PUBLIC_RS_API_URL: https://api.paragoniks.pl
          EXPO_PUBLIC_NODE_ENV: production
        run: |
          pnpm npx expo export --platform web
        working-directory: ./app

      - name: Save service account key
        run: |
          echo "${{ secrets.GCP_SA_KEY_BASE64 }}" | base64 --decode > /tmp/firebase-credentials.json

      - name: Install Firebase CLI
        run: curl -sL https://firebase.tools | bash
      
      - name: Deploy to Firebase
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-credentials.json
        run: firebase deploy --only hosting --project paragoniks

  terraform:
    runs-on: ubuntu-latest
    name: Apply Terraform
    needs: [build-backend, build-frontend, build-receipt-scanner]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.0.0"
          
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init
          
      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -var="git_hash=$(git rev-parse --short "$GITHUB_SHA")" -var="project_id=${{ secrets.GCP_PROJECT_ID }}"
          
      - name: Terraform Apply
        run: |
          cd infrastructure
          terraform apply -auto-approve -var="git_hash=$(git rev-parse --short "$GITHUB_SHA")" -var="project_id=${{ secrets.GCP_PROJECT_ID }}"

