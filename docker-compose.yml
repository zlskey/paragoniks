services:
  paragoniks-api:
    container_name: ${DOCKER_API_CONTAINER_NAME}
    command: pnpm dev
    depends_on:
      - paragoniks-db
      - paragoniks-bucket
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./api/docker/Dockerfile
      target: development
    volumes:
      - ./api:/usr/src/app
      - ./shared:/usr/src/shared
    env_file:
      - ".env"
      - "./api/.env"
    ports:
      - 3000:3000

  paragoniks-db:
    container_name: ${DOCKER_DB_CONTAINER_NAME}
    image: mongo:8.0.11
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DOCKER_DB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DOCKER_DB_ROOT_PASSWORD}
    volumes:
      - paragoniks-mongo:/data
    ports:
      - 27017:27017

  paragoniks-bucket:
    container_name: paragoniks-bucket
    image: fsouza/fake-gcs-server
    command:
      - -scheme
      - http
      - -port
      - "4443"
      - -external-url
      - http://paragoniks-bucket:4443
    ports:
      - "4443:4443"
    volumes:
      - paragoniks-bucket:/data

  paragoniks-ngrok:
    container_name: paragoniks-ngrok
    image: ngrok/ngrok:latest
    restart: unless-stopped
    profiles: [ngrok]
    command: 
      - 'http'
      - '--host-header=rewrite'
      - 'http://paragoniks-api:3000'
      - '--domain=cunning-pipefish-especially.ngrok-free.app'
      - '--log=stdout'
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
      NGROK_LOG: debug

volumes:
  paragoniks-bucket:
  paragoniks-mongo:
